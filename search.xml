<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Struts2漏洞】S2-002</title>
      <link href="/2021/01/12/%E3%80%90Struts2%E6%BC%8F%E6%B4%9E%E3%80%91S2-002/"/>
      <url>/2021/01/12/%E3%80%90Struts2%E6%BC%8F%E6%B4%9E%E3%80%91S2-002/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h3 id="修复分析"><a href="#修复分析" class="headerlink" title="修复分析"></a>修复分析</h3>]]></content>
      
      
      <categories>
          
          <category> Vulnerability </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Struts2漏洞】S2-001</title>
      <link href="/2021/01/08/%E3%80%90Struts2%E6%BC%8F%E6%B4%9E%E3%80%91S2-001/"/>
      <url>/2021/01/08/%E3%80%90Struts2%E6%BC%8F%E6%B4%9E%E3%80%91S2-001/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code>影响版本：Struts 2.0.0 - 2.0.8官方通告 https://cwiki.apache.org/confluence/display/WW/S2-001</code></pre><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><pre><code>    新建一个Java项目，目录文件如图：</code></pre><p><img src="1.jpg" alt=""></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><pre><code>大致上就是Struts2在渲染解析页面的时候，将值进行了OGNL递归处理造成了命令执行的问题。从调试的堆栈中可以发现，从UIBean类的evaluateParams()进入调用Component类addParameter()再调findValue()，最后再调用TextParseUtil类的translateVariables()。因为Struts2在页面使用%{}渲染，所以translateVariables会处理%{}的表达式，然后这边递归就会调用了ValueStack类的findValue()解析了表达式</code></pre><p><img src="2.jpg" alt=""></p><h3 id="修复分析"><a href="#修复分析" class="headerlink" title="修复分析"></a>修复分析</h3><pre><code>在xwork 2.0.4版本中，增加一个循环限制的参数和判断</code></pre><p><img src="3.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Vulnerability </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】 OGNL表达式</title>
      <link href="/2020/12/09/%E3%80%90Java%E7%9F%A5%E8%AF%86%E3%80%91Java-OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/12/09/%E3%80%90Java%E7%9F%A5%E8%AF%86%E3%80%91Java-OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><pre><code>OGNL,英文全拼Object-Graph Navigation Language(对象图导航语言).通过OGNL表达式可以简便存取Java对象树中的任意属性和调用Java对象树的方法等,因此通过OGNL表达式可以将Model的属性和View层做数据绑定.Struts2标签默认支持OGNL表达式。</code></pre><h3 id="OGNL三要素"><a href="#OGNL三要素" class="headerlink" title="OGNL三要素"></a>OGNL三要素</h3><pre><code>OGNL具有三要素:表达式(expression)、根对象(root)和上下文对象(context).* 表达式 --即表达式要执行的操作* 根对象 --即表达式操作的对象* 上下文对象 --即表达式运行的上下文环境</code></pre><h3 id="OGNL-in-Struts2"><a href="#OGNL-in-Struts2" class="headerlink" title="OGNL in Struts2"></a>OGNL in Struts2</h3><pre><code>在Struts2中,OGNL的上下文(context)即为Strut2的上下文(ActionContext),根元素(root)即为Struts2的值栈(ValueStack)</code></pre><p><img src="context.jpg" alt=""></p><blockquote><p>Struts2的核心为Action,每一次HTTP请求，Struts2会生成一个ActionContext,并自动存储了一些在Action执行过程中所需的物件，比如session, parameters, locale等.</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>* 1.访问常量: &quot;string&quot;,10.01B,100000H* 2.访问变量: #name* 3.访问实例属性: user.name* 4.调用静态变量: @class@field* 5.调用静态方法: @class@method(args) 未指定class默认为java.lang.Math* 6.构造实例对象: new java.util.ArrayList()* 7.投影: userList.{username} 将集合中某相同属性提取* 8.选择: userList.{? #username != null}  conllection.{operate condition} 操作符支持?(所有)、$(第一个)、^(最后一个)* 9.#的用法: [1].访问非根对象,由于OGNL的root为ValueStack,访问其他对象就需要使用;[2].选择,见上面第8点;[3].用户构造Map,如#{&#39;foo1&#39;:&#39;bar1&#39;, &#39;foo2&#39;:&#39;bar2&#39;}* 10.$的用法: </code></pre><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre><code>在Struts2中获取Web路径：</code></pre><pre><code class="java">%{#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#39;/&#39;)),#response.flush(),#response.close()}</code></pre><h3 id="相关漏洞"><a href="#相关漏洞" class="headerlink" title="相关漏洞"></a>相关漏洞</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OGNL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
